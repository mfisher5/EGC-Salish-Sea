knitr::opts_chunk$set(echo = TRUE)
library(here)
library(tidyverse)
# folder with fastq files
fastq_dir <- "data/raw/run2"
# folder for output
output_dir <- "data/cutadapt"
# folder for sequencing metadata file
meta_output_dir <- "data"
# which lane of sequencing is being analyzed?
run <- 2
# ?
params <- data.frame(minlength=100)
meta_dir <- "data"
primerfilename <- "primer_sequences.csv"
primer_seqs <- read_csv(here(meta_dir, primerfilename))
## forward
ffilenames <- list.files(path = here("data/raw/run2/"),
pattern="*R1_001.fastq.gz")
## reverse
rfilenames <- list.files(path = here("data/raw/run2/"),
pattern="*R2_001.fastq.gz")
fdat <- data.frame(file1=ffilenames) %>%
# create sample name / sample ID from file name, without file suffix
mutate(sample_name=str_remove(file1,"_L001_R1_001.fastq.gz")) %>%
separate(col=sample_name, into=c("sample_id","Sample_name"), sep=-2) %>%
# clean up sample id and sample name
mutate(sample_id=str_remove(sample_id,"_S"),
sample_id=ifelse(str_sub(sample_id,-1)=="_",str_sub(sample_id,1,-2), sample_id),
Sample_name=str_remove(Sample_name,"_S"),
Sample_name=str_remove(Sample_name,"S")) %>%
arrange(as.numeric(Sample_name))
View(fdat)
rdat <- data.frame(file2=rfilenames) %>%
# create sample name / sample ID from file name, without file suffix
mutate(sample_name=str_remove(file2,"_L001_R2_001.fastq.gz")) %>%
separate(col=sample_name, into=c("sample_id","Sample_name"), sep=-2) %>%
# clean up sample id and sample name
mutate(sample_id=str_remove(sample_id,"_S"),
sample_id=ifelse(str_sub(sample_id,-1)=="_",str_sub(sample_id,1,-2), sample_id),
Sample_name=str_remove(Sample_name,"_S"),
Sample_name=str_remove(Sample_name,"S")) %>%
arrange(as.numeric(Sample_name))
sequencingmetafile <- full_join(fdat,rdat,by=c("Sample_name","sample_id")) %>%
dplyr::select(Sample_name,file1,file2)
View(sequencingmetafile)
sequencingmetafile %<>%
mutate(primer="Leray") %>%
left_join(primer_seqs, by="primer") %>%
mutate(Locus=primer,
PrimerF=primerF,
PrimerR=primerR) %>%
dplyr::select(Sample_name,file1,file2,PrimerF,PrimerR,Locus)
View(sequencingmetafile)
write_csv(sequencingmetafile, here(meta_output_dir, paste0("metadata-cutadapt-input-run-", run, ".csv")))
outputfolder <- paste0(here(output_dir))
dir.create(outputfolder)
paramsfile <- paste0(outputfolder,"/params.txt")
sequencingmetadatafile <- paste0(here(meta_output_dir, paste0("metadata-cutadapt-input-run-", run, ".csv")))
fastqfolder <- paste0(here(fastq_dir))
params2 <- c(fastqfolder,sequencingmetadatafile, outputfolder, params$minlength)
tibble(values = as.character(params2), names = c("fastqfolder", "sequencingmetadatafile", "outputfolder", "minlength")) %>%
pivot_wider(names_from = names,
values_from = values) %>%
write_csv(paramsfile)
knitr::opts_chunk$set(echo = TRUE)
if(!require("here")) {install.packages("here")}
if(!require("tidyverse")) {install.packages("tidyverse")}
if(!require("magrittr")) {install.packages("magrittr")}
if(!require("digest")) {install.packages("digest")}
if(!require("seqinr")) {install.packages("seqinr")}
# if(!requireNamespace("BiocManager", quietly = TRUE)){install.packages("BiocManager")}
# BiocManager::install("dada2", version = "3.10")
library(dada2)
library(digest)
library(seqinr)
# root directory for cutadapt
cutadapt_dir <- "data/cutadapt/noprimers"
# output directory
outdir <- "data/dada2"
# vector of different markers, as they appear in directories / metadata file
markers <- c("Leray")
marker <- markers[1]
marker.meta <- read_csv(here(cutadapt_dir, "output.metadata.csv"))
## forward and reverse filenames
fnFs <- sort(list.files(path=here(cutadapt_dir), pattern="_R1_001.fastq", full.names = TRUE))
fnRs <- sort(list.files(path=here(cutadapt_dir), pattern="_R2_001.fastq", full.names = TRUE))
# sample.names <- marker.meta$Sample_name
prefix <- paste0("Locus_",marker[1],"_")
suffix <- paste0("_L001_R1_001.fastq.fastq")
sample.names <- str_remove(marker.meta$file1, prefix)
sample.names <- str_remove(sample.names,suffix)
plotQualityProfile(fnFs[c(1,2,6,19,25)])
knitr::opts_chunk$set(echo = TRUE)
if(!require("here")) {install.packages("here")}
if(!require("tidyverse")) {install.packages("tidyverse")}
if(!require("magrittr")) {install.packages("magrittr")}
if(!require("digest")) {install.packages("digest")}
if(!require("seqinr")) {install.packages("seqinr")}
# if(!requireNamespace("BiocManager", quietly = TRUE)){install.packages("BiocManager")}
# BiocManager::install("dada2", version = "3.10")
library(dada2)
library(digest)
library(seqinr)
# root directory for cutadapt
cutadapt_dir <- "data/cutadapt"
# output directory
outdir <- "data/dada2"
run.num = 2
hash = TRUE  # rarely do you want hash = false (EA)
keep.mid.files = FALSE # I find I never look at these / use these and they just take up space (EA)
run_cutadapt_dir = paste0(cutadapt_dir, "/run_", run.num,"/noprimers")
cutadapt.meta <- read_csv(here(run_cutadapt_dir, paste0("output.metadata.csv")))
run_cutadapt_dir = paste0(cutadapt_dir, "/noprimers")
cutadapt.meta <- read_csv(here(run_cutadapt_dir, paste0("output.metadata.csv")))
marker        <- unique(cutadapt.meta$Locus)
print(marker)
if(marker=="Leray" | marker=="LerayXT"){
trimming.length.r1 = 250
trimming.length.r2 = 200
message("trim lengths set as (r1,r1): ", trimming.length.r1, ",",trimming.length.r2)
} else if(marker=="BF3"){
trimming.length.r1 = 260
trimming.length.r2 = 200
} else{
message("please manually enter trim length for this marker.")
}
fnFs <- sort(list.files(path=here(run_cutadapt_dir), pattern="_R1_001.fastq.fastq", full.names = TRUE))
fnRs <- sort(list.files(path=here(run_cutadapt_dir), pattern="_R2_001.fastq.fastq", full.names = TRUE))
# sample.names <- marker.meta$Sample_name
prefix <- paste0("Locus_BF3_")
suffix <- paste0("_L001_R1_001.fastq.fastq")
sample.names.df <- (cutadapt.meta %>% dplyr::select(file1) %>%
mutate(sample_id=str_remove(file1,prefix)) %>%
mutate(sample_id=str_remove(sample_id,suffix)) %>%
separate(col=sample_id, into=c("sample_id","sample.num"), sep="_S")) %>% dplyr::select(sample_id)
sample.names <- as.character(sample.names.df$sample_id)
View(sample.names.df)
# sample.names <- marker.meta$Sample_name
prefix <- paste0("Locus_Leray_")
suffix <- paste0("_L001_R1_001.fastq.fastq")
sample.names.df <- (cutadapt.meta %>% dplyr::select(file1) %>%
mutate(sample_id=str_remove(file1,prefix)) %>%
mutate(sample_id=str_remove(sample_id,suffix)) %>%
separate(col=sample_id, into=c("sample_id","sample.num"), sep="_S")) %>% dplyr::select(sample_id)
View(sample.names.df)
sample.names <- as.character(sample.names.df$sample_id)
filt.dir <- paste0(cutadapt_dir, "/noprimers_filtered")
if(!dir.exists(here(filt.dir))){
dir.create(path = here(filt.dir),recursive = T)
}
if(!dir.exists(here(outdir))){
dir.create(path = here(outdir),recursive = T)
}
plotQualityProfile(fnFs[c(1,2,6,19,25)])
plotQualityProfile(fnRs[c(1,2,6,19,25)])
trimming.length.r2 = 190
run_cutadapt_dir
output.dada2 <- cutadapt.meta %>%
#filter(rc == 1) %>% # ONLY SELECT THE BACKWARDS ONES (1) OR FORWARDS ONES (0)
mutate(basename=sample.names) %>%
mutate(file1  = here(run_cutadapt_dir, file1),
file2  = here(run_cutadapt_dir, file2),
filtF1 = here(filt.dir, paste0(basename, "_F1_filt.fastq.gz")),
filtR1 = here(filt.dir, paste0(basename, "_R1_filt.fastq.gz"))) %>%
select(-basename) %>%
mutate (outFs = pmap(.l= list (file1, filtF1, file2, filtR1),
.f = function(a, b, c, d) {
filterAndTrim(a,b,c,d,
truncLen=c(trimming.length.r1,trimming.length.r2),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=FALSE )
} ),
errF1 = map(filtF1, ~ learnErrors(.x, multithread=FALSE,verbose = 0)),     # Calculate errors
errR1 = map(filtR1, ~ learnErrors(.x, multithread=FALSE,verbose = 0)),
derepF1 = map(filtF1, derepFastq),                   # dereplicate seqs
derepR1 = map(filtR1, derepFastq),
dadaF1  = map2(derepF1,errF1, ~ dada(.x, err = .y, multithread = FALSE)),  # dada2
dadaR1  = map2(derepR1,errR1, ~ dada(.x, err = .y, multithread = FALSE)),
mergers = pmap(.l = list(dadaF1,derepF1, dadaR1,derepR1),                 # merge things
.f = mergePairs ))
View(sequencingmetafile)
View(cutadapt.meta)
View(sample.names.df)
knitr::opts_chunk$set(echo = TRUE)
if(!require("here")) {install.packages("here")}
if(!require("tidyverse")) {install.packages("tidyverse")}
if(!require("magrittr")) {install.packages("magrittr")}
if(!require("digest")) {install.packages("digest")}
if(!require("seqinr")) {install.packages("seqinr")}
# if(!requireNamespace("BiocManager", quietly = TRUE)){install.packages("BiocManager")}
# BiocManager::install("dada2", version = "3.10")
library(dada2)
library(digest)
library(seqinr)
# root directory for cutadapt
cutadapt_dir <- "data/cutadapt"
# output directory
outdir <- "data/dada2"
run.num = 2
hash = TRUE  # rarely do you want hash = false (EA)
keep.mid.files = FALSE # I find I never look at these / use these and they just take up space (EA)
run_cutadapt_dir = paste0(cutadapt_dir, "/noprimers")
cutadapt.meta <- read_csv(here(run_cutadapt_dir, paste0("output.metadata.csv")))
marker        <- unique(cutadapt.meta$Locus)
print(marker)
if(marker=="Leray" | marker=="LerayXT"){
trimming.length.r1 = 250
trimming.length.r2 = 200
message("trim lengths set as (r1,r1): ", trimming.length.r1, ",",trimming.length.r2)
} else if(marker=="BF3"){
trimming.length.r1 = 260
trimming.length.r2 = 200
} else{
message("please manually enter trim length for this marker.")
}
fnFs <- sort(list.files(path=here(run_cutadapt_dir), pattern="_R1_001.fastq.fastq", full.names = TRUE))
fnRs <- sort(list.files(path=here(run_cutadapt_dir), pattern="_R2_001.fastq.fastq", full.names = TRUE))
# sample.names <- marker.meta$Sample_name
prefix <- paste0("Locus_Leray_")
suffix <- paste0("_L001_R1_001.fastq.fastq")
sample.names.df <- (cutadapt.meta %>% dplyr::select(file1) %>%
mutate(sample_id=str_remove(file1,prefix)) %>%
mutate(sample_id=str_remove(sample_id,suffix)) %>%
separate(col=sample_id, into=c("sample_id","sample.num"), sep="_S")) %>% dplyr::select(sample_id)
sample.names <- as.character(sample.names.df$sample_id)
View(sample.names.df)
fnFs
?sapply
fnFs <- sapply(fnFs, FUN=str_remove,string=.,pattern=here(run_cutadapt_dir))
fnFs <- sapply(fnFs, FUN=str_remove,pattern=here(run_cutadapt_dir))
fnFs <- sort(list.files(path=here(run_cutadapt_dir), pattern="_R1_001.fastq.fastq", full.names = TRUE))
fnFs_simple <- sapply(fnFs, FUN=str_remove,pattern=paste0(here(run_cutadapt_dir),"/"))
fnRs <- sort(list.files(path=here(run_cutadapt_dir), pattern="_R2_001.fastq.fastq", full.names = TRUE))
fnFs_simple
fnFs_simple <- unlist(sapply(fnFs, FUN=str_remove,pattern=paste0(here(run_cutadapt_dir),"/")))
fnFs_simple
fnFs_simple <- str_remove(fnFs,pattern=paste0(here(run_cutadapt_dir),"/") # unlist(sapply(fnFs, FUN=str_remove,pattern=paste0(here(run_cutadapt_dir),"/")))
)
fnFs_simple
# sample.names <- marker.meta$Sample_name
prefix <- paste0("Locus_Leray_")
suffix <- paste0("_L001_R1_001.fastq.fastq")
sample.names.df <- (cutadapt.meta %>% dplyr::select(file1) %>%
filter(file1 %in% fnFs_simple) %>%
mutate(sample_id=str_remove(file1,prefix)) %>%
mutate(sample_id=str_remove(sample_id,suffix)) %>%
separate(col=sample_id, into=c("sample_id","sample.num"), sep="_S")) %>% dplyr::select(sample_id)
sample.names <- as.character(sample.names.df$sample_id)
View(sample.names.df)
cutadapt.meta.output <- filter(cutadapt.meta, file1 %in% fnFs_simple)
filt.dir <- paste0(cutadapt_dir, "/noprimers_filtered")
trimming.length.r1 = 250
trimming.length.r2 = 190
View(cutadapt.meta.output)
output.dada2 <- cutadapt.meta.output %>%
#filter(rc == 1) %>% # ONLY SELECT THE BACKWARDS ONES (1) OR FORWARDS ONES (0)
mutate(basename=sample.names) %>%
mutate(file1  = here(run_cutadapt_dir, file1),
file2  = here(run_cutadapt_dir, file2),
filtF1 = here(filt.dir, paste0(basename, "_F1_filt.fastq.gz")),
filtR1 = here(filt.dir, paste0(basename, "_R1_filt.fastq.gz"))) %>%
select(-basename) %>%
mutate (outFs = pmap(.l= list (file1, filtF1, file2, filtR1),
.f = function(a, b, c, d) {
filterAndTrim(a,b,c,d,
truncLen=c(trimming.length.r1,trimming.length.r2),
maxN=0, maxEE=c(2,2), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=FALSE )
} ),
errF1 = map(filtF1, ~ learnErrors(.x, multithread=FALSE,verbose = 0)),     # Calculate errors
errR1 = map(filtR1, ~ learnErrors(.x, multithread=FALSE,verbose = 0)),
derepF1 = map(filtF1, derepFastq),                   # dereplicate seqs
derepR1 = map(filtR1, derepFastq),
dadaF1  = map2(derepF1,errF1, ~ dada(.x, err = .y, multithread = FALSE)),  # dada2
dadaR1  = map2(derepR1,errR1, ~ dada(.x, err = .y, multithread = FALSE)),
mergers = pmap(.l = list(dadaF1,derepF1, dadaR1,derepR1),                 # merge things
.f = mergePairs ))
if (keep.mid.files==TRUE){
write_rds(output.dada2, path = here(output.dir, "output.halfway.rds"))}
seqtab <- makeSequenceTable(output.dada2$mergers)
dim(seqtab)
table(nchar(getSequences(seqtab)))
table(nchar(getSequences(seqtab))) %>% as.data.frame() %>%
mutate(Length=as.character(Var1),
Length=as.numeric(Length)) %>%
ggplot( aes(x=Length,y=Freq)) +
geom_col() + theme_bw()
write.csv(table(nchar(getSequences(seqtab))) %>% as.data.frame() %>%
mutate(Length=as.character(Var1),
Length=as.numeric(Length)), file=here(output.dir,'dada2_filtered_seqLengths.csv'))
write.csv(table(nchar(getSequences(seqtab))) %>% as.data.frame() %>%
mutate(Length=as.character(Var1),
Length=as.numeric(Length)), file=here(outdir,'dada2_filtered_seqLengths.csv'))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", verbose=TRUE)
dim(seqtab.nochim)
seqtab.nochim.df <- as.data.frame(seqtab.nochim)
cutadapt.meta.output %>% write_csv(here(outdir,"dada2.metadata.csv"))
conv_file <- here(outdir,"hash_key.csv")
conv_file.fasta <- here(outdir,"hash_key.fasta")
ASV_file <-  here(outdir,"ASV_table.csv")
if (hash==TRUE)
{conv_table <- tibble( Hash = "", Sequence ="")
map_chr (colnames(seqtab.nochim.df), ~ digest(.x, algo = "sha1", serialize = F, skip = "auto")) -> Hashes
conv_table <- tibble (Hash = Hashes,
Sequence = colnames(seqtab.nochim.df))
seqtab.nochim.hashes.df <- seqtab.nochim.df
colnames(seqtab.nochim.hashes.df) <- Hashes
write_csv(conv_table, conv_file) # write the table into a file
write.fasta(sequences = as.list(conv_table$Sequence),
names     = as.list(conv_table$Hash),
file.out = conv_file.fasta)
seqtab.nochim.hashes.df <- bind_cols(cutadapt.meta %>%
select(Sample_name, Locus),
sample.names.df,
seqtab.nochim.hashes.df)
seqtab.nochim.hashes.df %>%
pivot_longer(cols = c(- Sample_name, -sample_id, - Locus),
names_to = "Hash",
values_to = "nReads") %>%
filter(nReads > 0) -> current_asv
write_csv(current_asv, ASV_file)    }else{
#What do we do if you don't want hashes: two things - Change the header of the ASV table, write only one file
seqtab.nochim.df %>%
pivot_longer(cols = c(- Sample_name, - Locus),
names_to = "Sequence",
values_to = "nReads") %>%
filter(nReads > 0) -> current_asv
write_csv(current_asv, ASV_file)
}
if (hash==TRUE)
{conv_table <- tibble( Hash = "", Sequence ="")
map_chr (colnames(seqtab.nochim.df), ~ digest(.x, algo = "sha1", serialize = F, skip = "auto")) -> Hashes
conv_table <- tibble (Hash = Hashes,
Sequence = colnames(seqtab.nochim.df))
seqtab.nochim.hashes.df <- seqtab.nochim.df
colnames(seqtab.nochim.hashes.df) <- Hashes
write_csv(conv_table, conv_file) # write the table into a file
write.fasta(sequences = as.list(conv_table$Sequence),
names     = as.list(conv_table$Hash),
file.out = conv_file.fasta)
seqtab.nochim.hashes.df <- bind_cols(cutadapt.meta.output %>%
select(Sample_name, Locus),
sample.names.df,
seqtab.nochim.hashes.df)
seqtab.nochim.hashes.df %>%
pivot_longer(cols = c(- Sample_name, -sample_id, - Locus),
names_to = "Hash",
values_to = "nReads") %>%
filter(nReads > 0) -> current_asv
write_csv(current_asv, ASV_file)    }else{
#What do we do if you don't want hashes: two things - Change the header of the ASV table, write only one file
seqtab.nochim.df %>%
pivot_longer(cols = c(- Sample_name, - Locus),
names_to = "Sequence",
values_to = "nReads") %>%
filter(nReads > 0) -> current_asv
write_csv(current_asv, ASV_file)
}
getN <- function(x) sum(getUniques(x))
qc.dat <- output.dada2 %>%
select(-file1, -file2, -filtF1, -filtR1, -errF1, -errR1, -derepF1, -derepR1) %>%
mutate_at(.vars = c("dadaF1", "dadaR1", "mergers"),
~ sapply(.x,getN)) %>%
#  pull(outFs) -> test
mutate(input = map_dbl(outFs, ~ .x[1]),
filtered = map_dbl(outFs, ~ .x[2]),
tabled  = rowSums(seqtab),
nonchim = rowSums(seqtab.nochim)) %>%
select(Sample_name,
Locus,
input,
filtered,
denoised_F = dadaF1,
denoised_R = dadaR1,
merged = mergers,
tabled,
nonchim)
write_csv(qc.dat, here(outdir,"dada2_qc_summary.csv"))
## drop
if (keep.mid.files==FALSE){
unlink(here(filt.dir), recursive = T)
}
qc.dat %>%
mutate_if(is.numeric, as.integer) %>%
pivot_longer(cols = c(-Sample_name, -Locus),
names_to = "Step",
values_to = "Number of Sequences") %>%
mutate (Step = fct_relevel(Step,
levels = c( "input","filtered","denoised_F" ,"denoised_R" , "merged" , "tabled", "nonchim"))) %>%
ggplot(aes(x = Step, y = `Number of Sequences`, group =  Sample_name, color = Sample_name)) +
geom_line() +
facet_wrap(~Sample_name) +
guides(color = "none")
qc.dat %>%
mutate_if(is.numeric, as.integer) %>%
pivot_longer(cols = c(-Sample_name, -Locus),
names_to = "Step",
values_to = "Number of Sequences") %>%
mutate (Step = fct_relevel(Step,
levels = c( "input","filtered","denoised_F" ,"denoised_R" , "merged" , "tabled", "nonchim"))) %>%
ggplot(aes(x = Step, y = `Number of Sequences`, group =  Sample_name, color = Sample_name)) +
geom_line() +
facet_wrap(~Sample_name) +
guides(color = "none")
qc.dat %>%
mutate_if(is.numeric, as.integer) %>%
pivot_longer(cols = c(-Sample_name, -Locus),
names_to = "Step",
values_to = "Number of Sequences") %>%
mutate (Step = fct_relevel(Step,
levels = c( "input","filtered","denoised_F" ,"denoised_R" , "merged" , "tabled", "nonchim"))) %>%
ggplot(aes(x = Step, y = `Number of Sequences`, group =  Sample_name, color = Sample_name)) +
geom_line() +
facet_wrap(~Sample_name) +
guides(color = "none")
qc.dat %>%
mutate_if(is.numeric, as.integer) %>%
pivot_longer(cols = c(-Sample_name, -Locus),
names_to = "Step",
values_to = "Number of Sequences") %>%
mutate (Step = fct_relevel(Step,
levels = c( "input","filtered","denoised_F" ,"denoised_R" , "merged" , "tabled", "nonchim"))) %>%
ggplot(aes(x = Step, y = `Number of Sequences`, group =  Sample_name, color = Sample_name)) +
geom_line() +
guides(color = "none")
?unlink
